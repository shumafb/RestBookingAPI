from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

from app.models.tables import Table
from app import schemas
from app.database import get_db
from app.logger import logger

router = APIRouter(
    tags=["tables"],
    prefix="/tables",
)

@router.get("/", response_model=List[schemas.Table])
def get_tables(db: Session = Depends(get_db)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã Table
    """
    logger.info("üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤")
    tables = db.query(Table).all()
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(tables)}")
    return tables

@router.post("/", response_model=schemas.Table)
def create_table(table: schemas.TableCreate, db: Session = Depends(get_db)):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Table
    """
    logger.info(f"‚ûï –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞: {table.dict()}")
    db_table = Table(**table.dict())
    db.add(db_table)
    db.commit()
    db.refresh(db_table)
    logger.info(f"‚úÖ –°—Ç–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {db_table.id}")
    return db_table

@router.delete("/{table_id}", response_model=dict)
def delete_table(table_id: int, db: Session = Depends(get_db)):
    """ 
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Table
    """
    logger.info(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞ —Å ID: {table_id}")
    db_table = db.query(Table).filter(Table.id == table_id).first()
    if not db_table:
        logger.warning(f"‚ùå –°—Ç–æ–ª —Å ID {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="–°—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    db.delete(db_table)
    db.commit()
    logger.info(f"‚úÖ –°—Ç–æ–ª —Å ID {table_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    return {"message": "–°—Ç–æ–ª —É–¥–∞–ª–µ–Ω"}